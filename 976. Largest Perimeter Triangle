class Solution {
    public int largestPerimeter(int[] nums) {
        int length = nums.length;
        int largestPerimeter = 0;

        for(int i = 0; i < length; i++){
            for(int j = i+1; j < length; j++){
                for(int k = j+1; k < length; k++){
                    int maxNum = Math.max(nums[i], nums[j]);
                    maxNum = Math.max(maxNum, nums[k]);
                    int perimeter = 0;

                    if(maxNum == nums[i]){
                        if((nums[k]+nums[j]) > nums[i]){
                            perimeter = nums[i] + nums[j] + nums[k];
                        }
                    }else if(maxNum == nums[j]){
                        if((nums[k]+nums[i]) > nums[j]){
                            perimeter = nums[i] + nums[j] + nums[k];
                        }
                    }else if(maxNum == nums[k]){
                        if((nums[i]+nums[j]) > nums[k]){
                            perimeter = nums[i] + nums[j] + nums[k];
                        }
                    }

                    if(perimeter > largestPerimeter){
                        largestPerimeter = perimeter;
                    }
                    
                }

            }
        }

        return largestPerimeter;
        
    }
}

==============================================================================
//better answer
class Solution {
    public int largestPerimeter(int[] nums) {
        Arrays.sort(nums);
        
        // case where triangle will not be formed will be handled by 0;
        int largestPerimeter = 0;
        int length = nums.length;
        for(int i = length - 1; i >= 2; i--)
        {
            if(nums[i - 1]+nums[i - 2]>nums[i])
            {
                per=nums[i]+nums[i - 1]+nums[i - 2];
                break;
            }
            
        }
        return largestPerimeter;
    }
}
