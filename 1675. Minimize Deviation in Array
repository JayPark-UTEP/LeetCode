//Make all odd values even
//Take minimum of all values
//Find Max and difference and update max/2, till the max is even
//Otherwise difference is the result
//Time O(NlogNlongM)
//Space O(N)

class Solution {
    public int minimumDeviation(int[] nums) {
      PriorityQueue<Integer> pq=new PriorityQueue<>((a,b)->b-1);
      
      int min = Integer.MAX_VALUE;
      for(int i: nums){
        if(i%2==1) i*2;
        min=Math.min(min,i);
        pq.add(i);
    }
    
    int diff=Integer.MAX_VALUE;
    while(pq.peek()%2==0){
      int max=pq.remove();
      diff=Math.min(diff,max-min);
      min=Math.min(max/2,min);
      pq.add(max/2);
    }
    
    return Math.min(diff.pq.peek()-min);
}

=================================================
class Solution {
    public int minimumDeviation(int[] nums) {
        return util(nums, nums.length);
    }

    private int util(int A[], int N)
{
   
    // Store all array elements
    // in sorted order
    TreeSet<Integer> s = new TreeSet<Integer>();
    for (int i = 0; i < N; i++)
    {
 
        if (A[i] % 2 == 0)
            s.add(A[i]);
 
        // Odd number are transformed
        // using 2nd operation
        else
            s.add(2 * A[i]);
    }
 
    // (Maximum - Minimum)
    int diff =  s.last() -  s.first() ;
 
    // Check if the size of set is > 0 and
    // the maximum element is divisible by 2
    while ((s.last() % 2 == 0))
    {
 
        // Maximum element of the set
        int maxEl = s.last();
 
        // Erase the maximum element
        s.remove(maxEl);
 
        // Using operation 1
        s.add(maxEl / 2);
 
        // (Maximum - Minimum)
        diff = Math.min(diff, s.last() -  s.first());
    }
 
    // Print the Minimum
    // Deviation Obtained
    return (diff);
}
 
}
